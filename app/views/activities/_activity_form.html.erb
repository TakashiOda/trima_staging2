<!--<div id="loading_box" class="">
  <div class="loading_inner">
    <div class="loader"></div>
    <p class="loading_text">読み込み中...</p>
  </div>
</div> -->
<%= form_for [current_supplier, @activity], :html=> {:id => 'activity_form'} do |f| %>
  <%= f.hidden_field :supplier_id, value: current_supplier.id %>
  <div class="form_title">
    <% if controller.action_name == "new" %>
      <h3>体験を登録</h3>
    <% else %>
      <h3>体験を編集</h3>
    <% end %>
    <%= render 'layouts/error_messages', model: f.object %>
  </div>
  <div class="user_show_content_down">
    <div class="user_show_info_items_box">
      <section class="form_section">
        <div class="form_big_title">
          <h3><i class="fas fa-info-circle"></i>アクティビティの基本情報</h3>
        </div>
        <div class="activity_description_language_box">
          <ul class="activity_description_language_box_tab_list" role="tablist">
            <li id="japanese_tab" class="active" onclick="toggleDescriptionTab(this)">
              <span>日本語</span>
            </li>
            <li id="english_tab" onclick="toggleDescriptionTab(this)">
              <span>英語</span>
            </li>
          </ul>
          <div class="tab-content-items">
            <div id="japanese_tab_content">
              <div class="form-group">
                <div class="label_with_must">
                  <%= f.label :name %><span class="must_input">必須</span>
                </div>
                <%= f.text_field :name, minlength: 6, maxlength: 40, required: true, class: "form-control", oninput: 'hasInput()' %>
              </div>
              <div class="form-group">
                <div class="limited_textbox_label_box">
                  <div class="label_with_must">
                    <%= f.label :description %><span class="must_input">必須</span>
                  </div>
                  <label><span>残り<span id="activity_description_count">200</span>字</span></label>
                </div>
                <%= f.text_area :description, rows: 6, minlength: 20, maxlength: 200, required: true, class: "form-control", oninput: 'countDescription(this)' %>
              </div>
              <div class="form-group">
                <div class="limited_textbox_label_box">
                  <div class="label_with_must">
                    <%= f.label :notes %><span class="must_input">必須</span>
                  </div>
                  <label><span>残り<span id="activity_notes_count">500</span>字</span></label>
                </div>
                <%= f.text_area :notes, rows: 7, maxlength: 500, required: true, class: "form-control", oninput: 'countNotes(this)' %>
              </div>
            </div>
            <div class="hidden" id="english_tab_content">
              <%= f.fields_for :activity_translations do |english| %>
                <%= english.hidden_field :language_id, value: 3, class: "form-control" %>
                <div class="form-group">
                  <%= english.label :name %>
                  <%= english.text_field :name, maxlength: 40, class: "form-control", oninput: 'hasInput()' %>
                </div>
                <div class="form-group">
                  <div class="limited_textbox_label_box">
                    <%= english.label :profile_text %>
                    <label><span>残り<span id="activity_english_description_count">200</span>字</span></label>
                  </div>
                  <%= english.text_area :profile_text, rows: 6, maxlength: 200, class: "form-control", oninput: 'countEnglishDescription(this)' %>
                </div>
                <div class="form-group">
                  <div class="limited_textbox_label_box">
                    <%= english.label :notes %>
                    <label><span>残り<span id="activity_english_notes_count">500</span>字</span></label>
                  </div>
                  <%= english.text_area :notes, rows: 7, maxlength: 500, class: "form-control", oninput: 'countEnglishNotes(this)' %>
                </div>
              <% end %>
            </div>
          </div>
        </div>

        <div class="form-group">
          <div class="label_with_must">
            <%= f.label :activity_category_id %><span class="must_input">必須</span>
          </div>
          <%= f.collection_select :activity_category_id, ActivityCategory.all, :id, :jp_name, {prompt: "選択してください"}, required: true, class: "form-control", onChange: 'hasInput()' %>
        </div>
      </section>
      <section class="form_section">
        <div class="form_big_title">
          <h3><i class="fas fa-sort-numeric-down-alt"></i>参加条件</h3>
        </div>
        <div class="form-group">
          <div class="num_input">
            <div class="label_with_must_column">
              <%= f.label :available_age %><span class="must_input">必須</span>
            </div>
            <div class="num_input_box">
              <%= f.number_field :available_age, min: 0, max: 100, required: true, class: "form-control", oninput: 'hasInput()' %>歳
            </div>
          </div>
        </div>
        <div class="form-group">
          <div class="num_input">
            <div class="label_with_must_column">
              <%= f.label :minimum_num %><span class="must_input">必須</span>
            </div>
            <div class="num_input_box">
              <%= f.number_field :minimum_num, min: 1, max: 50, required: true, class: "form-control", oninput: 'hasInput()' %>名
            </div>
          </div>
        </div>
        <div class="form-group">
          <div class="num_input">
            <div class="label_with_must_column">
              <%= f.label :maximum_num %><span class="must_input">必須</span>
            </div>
            <div class="num_input_box">
              <%= f.number_field :maximum_num, min: 1, max: 50, required: true, class: "form-control", oninput: 'hasInput()' %>名
            </div>
          </div>
        </div>
      </section>
      <section class="form_section">
        <div class="form_big_title">
          <h3><i class="fas fa-map-marker-alt"></i>アクティビティの位置情報</h3>
        </div>
        <div class="form-group">
          <%= f.hidden_field :area_id, value: @activity.area_id, id: 'hidden_area_field' %>
          <div class="label_with_must">
            <%= f.label :area_id %><span class="must_input">必須</span>
          </div>
          <%= collection_select :area_name, :name, Area.all, :id, :local_name, {prompt: "選択してください", selected: @activity.area_id}, { required: true ,class: "form-control", id: 'area_input', onChange: 'hasChangeArea(this)'} %>
          <%#= f.collection_select :area_id, Area.all, :id, :local_name, {prompt: "選択してください"}, class: "form-control", id: 'area_input', onChange: 'hasChangeArea(this)' %>
        </div>
        <div class="form-group">
          <%= f.hidden_field :town_id, id: 'hidden_town_field' %>
          <div class="label_with_must">
            <%= f.label :town_id %><span class="must_input">必須</span>
          </div>
          <div id="area_1" class="town_select">
            <%= collection_select :town_name, :name, Town.where(area_id: 1), :id, :jp_name, {prompt: "市区町村を選択"}, class: "form-control", oninput: 'hasSelectTown(this)' %>
          </div>
          <div id="area_2" class="town_select hidden">
            <%= collection_select :town_name, :name, Town.where(area_id: 2), :id, :jp_name, {prompt: "市区町村を選択"}, class: "form-control", oninput: 'hasSelectTown(this)' %>
          </div>
          <div id="area_3" class="town_select hidden">
            <%= collection_select :town_name, :name, Town.where(area_id: 3), :id, :jp_name, {prompt: "市区町村を選択"}, class: "form-control", oninput: 'hasSelectTown(this)' %>
          </div>
          <div id="area_4" class="town_select hidden">
            <%= collection_select :town_name, :name, Town.where(area_id: 4), :id, :jp_name, {prompt: "市区町村を選択"}, class: "form-control", oninput: 'hasSelectTown(this)' %>
          </div>
          <div id="area_5" class="town_select hidden">
            <%= collection_select :town_name, :name, Town.where(area_id: 5), :id, :jp_name, {prompt: "市区町村を選択"}, class: "form-control", oninput: 'hasSelectTown(this)' %>
          </div>
          <div id="area_6" class="town_select hidden">
            <%= collection_select :town_name, :name, Town.where(area_id: 6), :id, :jp_name, {prompt: "市区町村を選択"}, class: "form-control", oninput: 'hasSelectTown(this)' %>
          </div>
          <div id="area_7" class="town_select hidden">
            <%= collection_select :town_name, :name, Town.where(area_id: 7), :id, :jp_name, {prompt: "市区町村を選択"}, class: "form-control", oninput: 'hasSelectTown(this)' %>
          </div>
          <div id="area_8" class="town_select hidden">
            <%= collection_select :town_name, :name, Town.where(area_id: 8), :id, :jp_name, {prompt: "市区町村を選択"}, class: "form-control", oninput: 'hasSelectTown(this)' %>
          </div>
          <div id="area_9" class="town_select hidden">
            <%= collection_select :town_name, :name, Town.where(area_id: 9), :id, :jp_name, {prompt: "市区町村を選択"}, class: "form-control", oninput: 'hasSelectTown(this)' %>
          </div>
          <div id="area_10" class="town_select hidden">
            <%= collection_select :town_name, :name, Town.where(area_id: 10), :id, :jp_name, {prompt: "市区町村を選択"}, class: "form-control", oninput: 'hasSelectTown(this)' %>
          </div>
          <div id="area_11" class="town_select hidden">
            <%= collection_select :town_name, :name, Town.where(area_id: 11), :id, :jp_name, {prompt: "市区町村を選択"}, class: "form-control", oninput: 'hasSelectTown(this)' %>
          </div>
        </div>
        <div class="form-group">
          <div class="row">
            <div class="geo_input">
              <div class="label_with_must">
                <%= f.label :latitude %><span class="must_input">必須</span>
              </div>
              <%= f.text_field :latitude, required: true, class: "form-control", id: 'latitude_input' %>
            </div>
            <div class="geo_input">
              <div class="label_with_must">
                <%= f.label :longitude %><span class="must_input">必須</span>
              </div>
              <%= f.text_field :longitude, required: true, class: "form-control", id: 'longitude_input' %>
            </div>
          </div>
        </div>
        <div id="map"></div>
      </section>
      <section class="form_section">
        <div class="form_big_title">
          <h3><i class="fas fa-street-view"></i>集合場所</h3>
        </div>
        <div class="form-group">
          <div class="label_with_must">
            <%= f.label :meeting_spot1_japanese_address %><span class="must_input">必須</span>
          </div>
          <%= f.text_field :meeting_spot1_japanese_address, maxlength: 80, required: true, class: "form-control", oninput: 'hasInput()' %>
        </div>
        <div class="form-group">
          <div class="limited_textbox_label_box">
            <div class="label_with_must">
              <%= f.label :meeting_spot1_japanese_description %><span class="must_input">必須</span>
            </div>
            <label><span>残り<span id="meeting_spot1_japanese_description_count">200</span>字</span></label>
          </div>
          <%= f.text_area :meeting_spot1_japanese_description, rows: 6, maxlength: 200, required: true, class: "form-control", oninput: 'countMeetingSpot1JPDescription(this)' %>
        </div>
        <div class="form-group">
          <div class="row">
            <div class="geo_input">
              <div class="label_with_must">
                <%= f.label :meeting_spot1_latitude %><span class="must_input">必須</span>
              </div>
              <%= f.text_field :meeting_spot1_latitude, required: true, class: "form-control", id: 'meeting_spot1_latitude' %>
            </div>
            <div class="geo_input">
              <div class="label_with_must">
                <%= f.label :meeting_spot1_longitude %><span class="must_input">必須</span>
              </div>
              <%= f.text_field :meeting_spot1_longitude, required: true, class: "form-control", id: 'meeting_spot1_longitude' %>
            </div>
          </div>
        </div>
        <div id="meetingmap"></div>
      </section>
      <section class="form_section">
        <div class="form_big_title after_second_title">
          <h3><i class="fas fa-images"></i>アクティビティの画像登録</h3>
        </div>
        <div class="form-group activity_image_items">
          <div class="form-group activity_image_item">
            <div class="activity_image_box_inside" onclick="activity_image1_input_btn()" >
              <img id="activity1_image_prev" src="#" class="hidden" />
              <% if current_supplier && @activity.main_image? %>
                <%= image_tag @activity.main_image.to_s, class: 'activity_present_image has_image1', id: 'activity1_present_image' %>
              <% else %>
                <%= image_tag 'default_images/no_image.png', class: 'activity_present_image', id: 'activity1_present_image' %>
                <%= f.hidden_field :main_image_cache %>
              <% end %>
            </div>
            <div class="activity_image_upload_btn_box hidden">
              <%= f.file_field :main_image, id: 'post_activity_image1', onChange: 'hasInput()' %>
            </div>
          </div>
          <div class="form-group activity_image_item">
            <div class="activity_image_box_inside" onclick="activity_image2_input_btn()" >
              <img id="activity2_image_prev" src="#" class="hidden" />
              <% if current_supplier && @activity.second_image? %>
                <%= image_tag @activity.second_image.to_s, class: 'activity_present_image has_image2', id: 'activity2_present_image' %>
              <% else %>
                <%= image_tag 'default_images/no_image.png', class: 'activity_present_image', id: 'activity2_present_image' %>
                <%= f.hidden_field :second_image_cache %>
              <% end %>
            </div>
            <div class="activity_image_upload_btn_box hidden">
              <%= f.file_field :second_image, id: 'post_activity_image2', onChange: 'hasInput()' %>
            </div>
          </div>
          <div class="form-group activity_image_item">
            <div class="activity_image_box_inside" onclick="activity_image3_input_btn()" >
              <img id="activity3_image_prev" src="#" class="hidden" />
              <% if current_supplier && @activity.third_image? %>
                <%= image_tag @activity.third_image.to_s, class: 'activity_present_image has_image3', id: 'activity3_present_image' %>
              <% else %>
                <%= image_tag 'default_images/no_image.png', class: 'activity_present_image', id: 'activity3_present_image' %>
                <%= f.hidden_field :third_image_cache %>
              <% end %>
            </div>
            <div class="activity_image_upload_btn_box hidden">
              <%= f.file_field :third_image, id: 'post_activity_image3', onChange: 'hasInput()' %>
            </div>
          </div>
          <div class="form-group activity_image_item">
            <div class="activity_image_box_inside" onclick="activity_image4_input_btn()" >
              <img id="activity4_image_prev" src="#" class="hidden" />
              <% if current_supplier && @activity.fourth_image? %>
                <%= image_tag @activity.fourth_image.to_s, class: 'activity_present_image has_image4', id: 'activity4_present_image' %>
              <% else %>
                <%= image_tag 'default_images/no_image.png', class: 'activity_present_image', id: 'activity4_present_image' %>
                <%= f.hidden_field :fourth_image_cache %>
              <% end %>
            </div>
            <div class="activity_image_upload_btn_box hidden">
              <%= f.file_field :fourth_image, id: 'post_activity_image4',onChange: 'hasInput()' %>
            </div>
          </div>
        </div>
        <!-- <div class="activity_image_delete_box">
          <ul>
            <li><button type="button" name="button" onclick="deleteImage(1)">削除</button></li>
            <li><button type="button" name="button" onclick="deleteImage(2)">削除</button></li>
            <li><button type="button" name="button" onclick="deleteImage(3)">削除</button></li>
            <li><button type="button" name="button" onclick="deleteImage(4)">削除</button></li>
          </ul>
        </div> -->
        <div class="hosoku_box">
          <p class="form_hosoku">※4枚全てアップロードしてください</p>
          <p class="form_hosoku">※アップロード可能ファイルは「jpeg/jpg/png」のみ、サイズは2MB以下です</p>
        </div>
      </section>
      <section class="form_section">
        <div class="form_big_title after_second_title">
          <h3><i class="fas fa-yen-sign"></i>料金に関する設定</h3>
        </div>
        <div class="form-group">
          <%= f.label "シーズン料金の有無" %>
          <div class="radio_items rain_or_shine_radio">
            <div class="radio_item">
              <%= f.radio_button :has_season_price, :true, onClick: "hasSeasonPrice(this)", oninput: 'hasInput()' %>
              <%= f.label :has_season_price, "シーズン料金あり", {value: :true, style: "display: inline-block;"} %>
            </div>
            <div class="radio_item">
              <%= f.radio_button :has_season_price, :false, onClick: "noSeasonPrice(this)", oninput: 'hasInput()'%>
              <%= f.label :has_season_price, "シーズン料金なし", {value: :false, style: "display: inline-block;"} %>
            </div>
          </div>
        </div>
        <div class="form-group">
          <%= f.label "年齢別料金の有無" %>
          <div class="radio_items rain_or_shine_radio">
            <div class="radio_item">
              <%= f.radio_button :has_different_ageprices, :true, onClick: "hasDiffAgePrice(this)", oninput: 'hasInput()' %>
              <%= f.label :has_different_ageprices, "年齢別料金あり", {value: :true, style: "display: inline-block;"} %>
            </div>
            <div class="radio_item">
              <%= f.radio_button :has_different_ageprices, :false, onClick: "noDiffAgePrice(this)", oninput: 'hasInput()'%>
              <%= f.label :has_different_ageprices, "年齢別料金なし", {value: :false, style: "display: inline-block;"} %>
            </div>
          </div>
        </div>
        <div class="form-group ageprice_table">
          <table class="ageprice_table">
            <tr>
              <th class="ageprice_type">料金タイプ</th>
              <th class="ageprice_price">通常料金</th>
              <th class="ageprice_price season_price_item <%= "hidden" if !@activity.has_season_price %>">ローシーズン料金</th>
              <th class="ageprice_price season_price_item <%= "hidden" if !@activity.has_season_price %>">ハイシーズン料金</th>
            </tr>
            <tr>
              <td class="ageprice_type"><%= f.label (@activity.has_different_ageprices ? '大人料金（中学生以上）' : '全ての年齢料金'), id: 'adult_price_label'%></td>
              <td class="ageprice_price input_box normal_price_item adult_item"><%= f.number_field :normal_adult_price, min: 1000, max: 100000, required: true, class: "form-control", oninput: 'hasInput()' %><div class="ageprice_unit">円</div></td>
              <td class="ageprice_price input_box season_price_item adult_item <%= "hidden" if !@activity.has_season_price %>"><%= f.number_field :low_adult_price, min: 1000, max: 100000, required: @activity.has_season_price, class: "form-control", oninput: 'hasInput()' %><div class="ageprice_unit">円</div></td>
              <td class="ageprice_price input_box season_price_item adult_item <%= "hidden" if !@activity.has_season_price %>"><%= f.number_field :high_adult_price, min: 1000, max: 100000, required: @activity.has_season_price, class: "form-control", oninput: 'hasInput()' %><div class="ageprice_unit">円</div></td>
            </tr>
            <tr class="other_ageprice_tr <%= "hidden" if !@activity.has_different_ageprices %>">
              <td class="ageprice_type"><%= f.label :小学生 %></td>
              <td class="ageprice_price input_box not_adult normal_price_item"><%= f.number_field :normal_middle_price, min: 1000, max: 100000, required: @activity.has_different_ageprices, class: "form-control", oninput: 'hasInput()' %><div class="ageprice_unit">円</div></td>
              <td class="ageprice_price input_box season_price_item not_adult <%= "hidden" if !@activity.has_season_price %>"><%= f.number_field :low_middle_price, min: 1000, max: 100000, required: @activity.has_season_price, class: "form-control", oninput: 'hasInput()' %><div class="ageprice_unit">円</div></td>
              <td class="ageprice_price input_box season_price_item not_adult <%= "hidden" if !@activity.has_season_price %>"><%= f.number_field :high_middle_price, min: 1000, max: 100000, required: @activity.has_season_price, class: "form-control", oninput: 'hasInput()' %><div class="ageprice_unit">円</div></td>
            </tr>
            <tr class="other_ageprice_tr <%= "hidden" if !@activity.has_different_ageprices %>">
              <td class="ageprice_type"><%= f.label :未就学児 %></td>
              <td class="ageprice_price input_box not_adult normal_price_item"><%= f.number_field :normal_kids_price, min: 1000, max: 100000, required: @activity.has_different_ageprices, class: "form-control", oninput: 'hasInput()' %><div class="ageprice_unit">円</div></td>
              <td class="ageprice_price input_box season_price_item not_adult <%= "hidden" if !@activity.has_season_price %>"><%= f.number_field :low_kids_price, min: 1000, max: 100000, required: @activity.has_season_price, class: "form-control", oninput: 'hasInput()' %><div class="ageprice_unit">円</div></td>
              <td class="ageprice_price input_box season_price_item not_adult <%= "hidden" if !@activity.has_season_price %>"><%= f.number_field :high_kids_price, min: 1000, max: 100000, required: @activity.has_season_price, class: "form-control", oninput: 'hasInput()' %><div class="ageprice_unit">円</div></td>
            </tr>
          </table>
        </div>
      </section>
      <section class="form_section">
        <div class="form_big_title after_second_title">
          <h3><i class="far fa-calendar-alt"></i>アクティビティの期間設定</h3>
        </div>
        <div class="form-group activity_season_radio">
          <div class="form-group">
            <%= f.label "実施期間は通年ですか？" %>
            <div class="radio_items rain_or_shine_radio">
              <div class="radio_item">
                <%= f.radio_button :is_all_year_open, :true, onClick: "isAllYearOpen(this)", oninput: 'hasInput()' %>
                <%= f.label :is_all_year_open, "通年", {value: :true, style: "display: inline-block;"} %>
              </div>
              <div class="radio_item">
                <%= f.radio_button :is_all_year_open, :false, onClick: "isLimitedOpen(this)", oninput: 'hasInput()' %>
                <%= f.label :is_all_year_open, "期間限定", {value: :false, style: "display: inline-block;"} %>
              </div>
            </div>
          </div>
        </div>
        <div class="form-group <%= "hidden" if @activity.is_all_year_open %>" id="activity_date_input_box">
          <div class="row">
            <div class="col-half">
              <%= f.label :start_date %>
              <%= f.date_field :start_date, class: "form-control date_select", id: "activity_start_select", onChange: "changeStartDate(this)", oninput: 'hasInput()' %>
            </div>
            <div class="col-half">
              <%= f.label :end_date %>
              <%= f.date_field :end_date, min: Date.today ,class: "form-control date_select", id: "activity_end_select", onChange: "changeEndDate(this)", oninput: 'hasInput()' %>
            </div>
          </div>
        </div>
        <div class="form-group">
          <%= f.label "営業する曜日" %>
          <div class="activity_openday_input_box">
              <div class="openday_checkbox"><%= f.check_box :monday_open, oninput: 'hasInput()' %><%= f.label "monday_open","月曜" %></div>
              <div class="openday_checkbox"><%= f.check_box :tuesday_open, oninput: 'hasInput()' %><%= f.label "tuesday_open","火曜" %></div>
              <div class="openday_checkbox"><%= f.check_box :wednesday_open, oninput: 'hasInput()' %><%= f.label "wednesday_open","水曜" %></div>
              <div class="openday_checkbox"><%= f.check_box :thursday_open, oninput: 'hasInput()' %><%= f.label "thursday_open","木曜" %></div>
              <div class="openday_checkbox"><%= f.check_box :friday_open, oninput: 'hasInput()' %><%= f.label "friday_open","金曜" %></div>
              <div class="openday_checkbox"><%= f.check_box :saturday_open, oninput: 'hasInput()' %><%= f.label "saturday_open","土曜" %></div>
              <div class="openday_checkbox"><%= f.check_box :sunday_open, oninput: 'hasInput()' %><%= f.label "sunday_open","日曜" %></div>
          </div>
        </div>
      </section>
      <section class="form_section">
        <div class="form_big_title after_second_title">
          <h3><i class="fas fa-clock"></i>アクティビティの時間設定</h3>
        </div>
        <div class="form-group">
          <div class="num_input">
            <div class="label_with_must_column">
              <%= f.label :activity_minutes %><span class="must_input">必須</span>
            </div>
            <div class="num_input_box">
              <%= f.number_field :activity_minutes, min: 20, max: 480 ,step: 5, required: true, class: "form-control", id: "activity_minutes", oninput: 'hasInput()' %>分
            </div>
          </div>
        </div>
        <div class="form-group">
          <div class="label_with_must">
            <%= f.label :activity_courses %><span class="must_input">必須</span>
          </div>
          <div class="course_table_head">
            <div class="course_row1"><span>コースNo.</span></div>
            <div class="course_row2">
              <span>開始時間</span>
            </div>
          </div>
          <div id="courses">
            <%= f.fields_for :activity_courses do |t| %>
              <%= render "activity_course_fields", f: t %>
            <% end %>
            <div class="links">
              <%= link_to_add_association "コースを追加", f, :activity_courses, form_name: 'f', id:"course_add_btn" %>
            </div>
          </div>
        </div>
      </section>
      <section class="form_section">
        <div class="form_big_title after_second_title">
          <h3><i class="fas fa-cloud-rain"></i>悪天候時について</h3>
        </div>
        <div class="form-group">
          <%= f.label "雨天時の開催設定" %>
          <div class="radio_items rain_or_shine_radio">
            <div class="radio_item">
              <%= f.radio_button :rain_or_shine, :false, oninput: 'hasInput()' %>
              <%= f.label :rain_or_shine, "雨天中止", {value: :false} %>
            </div>
            <div class="radio_item">
              <%= f.radio_button :rain_or_shine, :true, oninput: 'hasInput()' %>
              <%= f.label :rain_or_shine, "雨天決行", {value: :true} %>
            </div>
          </div>
        </div>
      </section>
      <!-- <section class="form_section">
        <div class="form-group">
          <div class="form_big_title after_second_title">
            <h3>検索に反映させる要素の設定</h3>
          </div>
          <%#= f.label "おすすめのシーズン" %>
          <div class="activity_season_input_box">
              <div class="form-group"><%#= f.check_box :january, oninput: 'hasInput()' %><%#= f.label "january", "１月", class: "top_left_check_label" %></div>
              <div class="form-group"><%#= f.check_box :febrary, oninput: 'hasInput()' %><%#= f.label "febrary","2月" %></div>
              <div class="form-group"><%#= f.check_box :march, oninput: 'hasInput()' %><%#= f.label "march","3月" %></div>
              <div class="form-group"><%#= f.check_box :april, oninput: 'hasInput()' %><%#= f.label "april","4月" %></div>
              <div class="form-group"><%#= f.check_box :may, oninput: 'hasInput()' %><%#= f.label "may","5月" %></div>
              <div class="form-group"><%#= f.check_box :june, oninput: 'hasInput()' %><%#= f.label "june","6月", class: "top_right_check_label" %></div>
          </div>
          <div class="activity_season_input_box">
              <div class="form-group"><%#= f.check_box :july, oninput: 'hasInput()' %><%#= f.label "july","7月", class: "bottom_left_check_label" %></div>
              <div class="form-group"><%#= f.check_box :august, oninput: 'hasInput()' %><%#= f.label "august","8月" %></div>
              <div class="form-group"><%#= f.check_box :september, oninput: 'hasInput()' %><%#= f.label "september","9月" %></div>
              <div class="form-group"><%#= f.check_box :october, oninput: 'hasInput()' %><%#= f.label "october","10月" %></div>
              <div class="form-group"><%#= f.check_box :november, oninput: 'hasInput()' %><%#= f.label "november","11月" %></div>
              <div class="form-group"><%#= f.check_box :december, oninput: 'hasInput()' %><%#= f.label "december","12月", class: "bottom_right_check_label" %></div>
          </div>
        </div>
      </section> -->
    </div>
    <div class="form_btns_box">
      <div class="form_btns_box_inner">
        <div id="no_input_counter_box">
          <span id="no_input_counter_box_title">未入力必須項目</span>
          <div id="no_input_left_alert">
            <span>残り</span>
            <span id="no_input_count"></span>
            <span>項目</span>
          </div>
          <div id="all_input_done_no_alert" class="hidden">
            <span>入力完了！</span>
          </div>
        </div>
        <div id="form_btns">
          <div class="draft_btn_box">
            <%= f.submit('下書き保存', name: "save_status",value: "下書き保存", class: 'btn-draft', id: "activity_form_draft_btn", onClick: 'pressSubmit()') %>
            <% if action_name == "new" %>
              <%= f.submit('公開', name: "save_status",value: "公開",class: 'btn-publish', id: "activity_form_submit_btn", onClick: 'pressSubmit()') %>
            <% else %>
              <%= f.submit('公開', name: "save_status",value: "公開",class: 'btn-publish', id: "activity_form_submit_btn", onClick: 'pressSubmit()') %>
            <% end %>
          </div>
          <span class="side_btns_option_title">保存オプション</span>
          <div class="activity_activate_btn_box">
            <div class="form-group side_btns_suspend_check"><%= f.check_box :stop_now %><%= f.label "stop_now","体験を非表示にする", class: "activity_activate_check" %></div>
            <!-- <div class="">
              <%#= f.select :status, {'下書き保存': 'inputting', '公開': 'published', '一時停止': 'deleted'}, {selected: 'inputting'}, { class: 'form-control' , required: true } %>
            </div> -->
          </div>
          <div class="activity_delete_btn_box">
            <% if action_name == 'edit' %>
              <%= link_to supplier_activity_delete_activity_path(current_supplier, @activity), method: :put, data: { confirm: '本当にゴミ箱に移動しますか?' } do %>
                <span><i class="far fa-trash-alt"></i></span>
                <span>ゴミ箱に移動</span>
              <% end %>
            <% end %>
          </div>
        </div>
        <div class="link_to_stockFrom_onActivityForm">
          <% if action_name == 'edit' %>
            <% if @activity.id && @activity.activity_courses.any? && @activity.activity_courses[0].activity_stocks.any? %>
              <% this_activity_stock_latest_date = @activity.activity_courses[0].activity_stocks.order(date: "DESC").limit(1)[0].date %>
              <% if this_activity_stock_latest_date > Date.today %>
                <%= link_to supplier_activity_edit_stocks_first_month_path(current_supplier, @activity), class: 'button btn-link' do %>
                  <span><i class="fas fa-cubes"></i></span>
                  <span>在庫を編集する</span>
                <% end %>
              <% else %>
                <%= link_to supplier_activity_new_stocks_first_month_path(current_supplier.id, @activity), class: 'button btn-link' do %>
                  <span><i class="fas fa-cubes"></i></span>
                  <span>在庫を登録する</span>
                <% end %>
              <% end %>
            <% else %>
              <%= link_to supplier_activity_new_stocks_first_month_path(current_supplier.id, @activity), class: 'button btn-link' do %>
                <span><i class="fas fa-cubes"></i></span>
                <span>在庫を登録する</span>
              <% end %>
            <% end %>
          <% end %>
        </div>
      </div>
    </div>
  </div>
<% end %>

<style lang="scss">
  .form_title { padding: 0 15px; }
  div.town_select select { width: 100%; }
  .min_max_num_input {
    display: flex;
    flex-direction: row;
  }
  .num_input_box {
    display: flex;
    align-items: flex-end;
  }
  .num_input_box input {
    width: 100px;
    text-align: right;
  }
  .geo_input {
    width: 48%;
    padding-right: 2%;
    display: flex;
    flex-direction: column;
  }
  .geo_input input {
    width: 100%;
    text-align: right;
  }
  .hosoku_box {
    background: #e8e8e8;
    padding: 10px 15px;
    border-radius: 5px;
    margin-top: 20px;
  }
  p.form_hosoku {
    margin-top: 0;
    margin-bottom: 2px;
    color: gray;
    font-size: 12px;
  }
  .help_box {
    background: #dadada;
    padding: 10px 10px;
    margin-top: 30px;
    border-radius: 10px;
  }
  .help_box .help_title {
    margin: 0;
    color: gray;
  }
  ul.help_steps li {
    color: gray;
  }
  table.ageprice_table .ageprice_type {
    text-align: left;
    width: 25%;
  }
  table.ageprice_table th {
    text-align: left;
  }
  table.ageprice_table tr {
    display: flex;
    flex-direction: row;
    align-items: center;
  }
  .ageprice_price {
    width: 25%;
  }
  td.ageprice_price.input_box {
    display: flex;
    flex-direction: row;
    width: 25%;
    align-items: flex-end;
  }
  td.ageprice_price input {
    width: calc(100% - 60px);
  }
  .ageprice_unit {
    width: 30px;
    padding-left: 4px;
    font-size: 15px;
    font-weight: bold;
    color: gray;
    line-height: 18px;
  }
  div#courses .form-group {
    padding: 0px 10px;
  }
  .form-group.ageprice_table {
    background: #dff9ff;
    border-radius: 7px;
  }
  .course_table_head {
    display: flex;
    background: #dff9ff;
    color: #000;
    font-size: 16px;
    font-weight: bold;
    padding: 8px 10px;
    margin: 0px 0;
    border-top-left-radius: 7px;
    border-top-right-radius: 7px;
    border-bottom: solid 1px #e9e9e9;
  }
  div#courses .nested-fields {
    background: #dff9ff;
  }
  #no_input_counter_box {
    height: 40px;
    background: #f77;
    padding: 10px 15px 10px;
    border-radius: 7px;
    box-shadow: 0px 0px 7px -1px #b7b7b7;
    margin-bottom: 10px;
    display: flex;
    align-items: baseline;
    justify-content: flex-end;
    padding: 10px;
    position: relative;
  }
  span#no_input_counter_box_title {
    position: absolute;
    font-size: 14px !important;
    top: 5px;
    left: 8px;
  }
  #no_input_counter_box span {
    font-weight: bold;
    color: #fff;
    font-size: 18px;
  }
  #no_input_counter_box span#no_input_count {
    font-size: 30px;
    margin-left: 7px;
    margin-right: 5px;
  }
  div#all_input_done_no_alert {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    width: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  .col-half {
    display: flex;
    flex-direction: column;
    width: 47%;
  }
  .form_btns_box_inner {
    position: sticky;
    top: 65px;
  }
  .draft_btn_box {
    margin-bottom: 20px;
  }
  .side_btns_option_title {
    color: gray;
    font-size: 12px;
    padding-left: 5px;
  }
  input#activity_form_draft_btn {
    border: solid 1px lightgray;
    border-radius: 4px;
    padding: 5px 15px;
    font-size: 14px;
    font-weight: bold;
    color: gray;
    width: 60%;
    height: 40px;
    line-height: 30px;
  }
  input#activity_form_submit_btn {
    width: 34%;
    margin-left: 3%;
    font-size: 14px;
    padding: 5px 15px;
    border-radius: 4px;
    border: solid 1px #0994ff;
    background: #0994ff;
    color: #ffffff;
    font-weight: bold;
    height: 40px;
    line-height: 30px;
    opacity: 0.3;
  }
  input#activity_form_draft_btn:hover,
  input#activity_form_submit_btn:hover {
    cursor: pointer;
    opacity: 0.4;
  }
  input#activity_form_draft_btn:focus,
  input#activity_form_submit_btn:focus {
    outline: none;
  }
  .activity_activate_btn_box {
    margin: 0px 5px 15;
    border: solid 1px #eaeaea;
    border-radius: 5px;
    background: #f9f9f994;
    padding: 10px;
  }
  .activity_delete_btn_box {
    margin: 10px 0 0;
    text-align: end;
  }
  .activity_delete_btn_box span,
  .activity_delete_btn_box svg {
    color: #ea3f3f;
    font-size: 13px;
  }
  .link_to_stockFrom_onActivityForm {
    display: flex;
    justify-content: flex-end;
  }
  a.button.btn-link {
    width: 75%;
    display: flex;
    justify-content: center;
    align-items: center;
    background: #0994ff;
    height: 40px;
    border-radius: 6px;
  }
</style>


<script>
  (window.onload = function() {
    const description = document.getElementById('activity_description');
    const notes = document.getElementById('activity_notes');
    const engDescription = document.getElementById('activity_activity_translations_attributes_0_profile_text');
    const engNotes = document.getElementById('activity_activity_translations_attributes_0_notes');
    const meetingDescription = document.getElementById('activity_meeting_spot1_japanese_description');
    changeCountAndColor(description, 'activity_description_count', 200);
    changeCountAndColor(notes, 'activity_notes_count', 500);
    changeCountAndColor(engDescription, 'activity_english_description_count', 200);
    changeCountAndColor(engNotes, 'activity_english_notes_count', 500);
    changeCountAndColor(meetingDescription, 'meeting_spot1_japanese_description_count', 200);

    // 初期でエリアに応じて市町村セレクタを分岐表示
    const areaInput = document.getElementById('hidden_area_field');
    if (areaInput.value !== '') {
      const townSelectors = document.querySelectorAll("div.town_select");
      for (var i = 0; i < townSelectors.length; i++) {
        const townSelectItem = townSelectors[i];
        townSelectItem.classList.add('hidden');
      }
      const targetId = `area_${areaInput.value}`;
      const targetTownSelectBox = document.getElementById(`${targetId}`);
      targetTownSelectBox.classList.remove('hidden');
    }

    // 初期で市町村セレクタを選択する
    const townInput = document.getElementById('hidden_town_field');
    if (townInput.value !== '') {
      const targetId = `area_${areaInput.value}`;
      const targetTownSelectBox = document.getElementById(`${targetId}`);
      const select =targetTownSelectBox.children[0];
      const options = select.options;
      for (var i = 0; i < options.length; i++) {
        if (options[i].value == townInput.value) {
          options[i].selected = true;
        }
      }
    }
    checkNoInput();
    const loading = document.getElementById('loading_box');
    setTimeout(function(){
      loading.classList.add('hidden');
    }, 800);
  })();

  function pressSubmit() {
    const loading = document.getElementById('loading_box');
    loading.classList.remove('hidden');
  }

  function hasInput() {
    // const draftBtn = document.getElementById('activity_form_draft_btn');
    // draftBtn.classList.add('need_submit');
    const submitBtn = document.getElementById('activity_form_submit_btn');
    submitBtn.classList.add('need_submit');
    checkNoInput();
  }

  function countDescription(obj) {
    hasInput();
    changeCountAndColor(obj, 'activity_description_count', 200);
  }
  function countNotes(obj) {
    hasInput();
    changeCountAndColor(obj, 'activity_notes_count', 500);
  }
  function countEnglishDescription(obj) {
    hasInput();
    changeCountAndColor(obj, 'activity_english_description_count', 200);
  }

  function countEnglishNotes(obj) {
    hasInput();
    changeCountAndColor(obj, 'activity_english_notes_count', 500);
  }
  function countMeetingSpot1JPDescription(obj) {
    hasInput();
    changeCountAndColor(obj, 'meeting_spot1_japanese_description_count', 200);
  }

  // textを変更するtarget idと数字を入れると、数字を超えたときにtargetのtextと色を変えてくれる
  function changeCountAndColor(obj, targetId, textNum) {
    const leftTextTarget = document.getElementById(targetId);
    leftTextTarget.innerHTML = textNum-obj.value.length;
    if ((textNum-obj.value.length) < 20) {
      leftTextTarget.style.color = 'red';
    } else {
      leftTextTarget.style.color = '#8a8a8a';
    }
  }

  function toggleDescriptionTab(obj) {
    const tabId = obj.id;
    const japaneseTab = document.getElementById('japanese_tab');
    const englishTab = document.getElementById('english_tab');
    // const chineseTab = document.getElementById('chinese_tab');
    const japaneseContent = document.getElementById('japanese_tab_content');
    const englishContent = document.getElementById('english_tab_content');
    // const chineseContent = document.getElementById('chinese_tab_content');
    if (tabId == 'japanese_tab') {
      japaneseTab.classList.add('active');
      englishTab.classList.remove('active');
      // chineseTab.classList.remove('active');

      japaneseContent.classList.remove('hidden');
      englishContent.classList.add('hidden');
      // chineseContent.classList.add('hidden');
    } else if (tabId == 'english_tab') {
      japaneseTab.classList.remove('active');
      englishTab.classList.add('active');
      // chineseTab.classList.remove('active');
      japaneseContent.classList.add('hidden');
      englishContent.classList.remove('hidden');
      // chineseContent.classList.add('hidden');
      // englishContent.classList.add('active');
    }
  }

  // function deleteImage(num) {
  //   const id = 'post_activity_image' + num;
  //   const imgFileInput = document.getElementById(id);
  //   if (imgFileInput.value) {
  //     imgFileInput.value = '';
  //   }
  //   const target = 'activity' + num + '_image_prev';
  //   const post_img = document.getElementById(target);
  //   post_img.src = "/images/no_image.png";
  //   post_img.classList.remove("hidden");
  //   const beforeTarget = 'activity' + num + '_present_image';
  //   const before_img = document.getElementById('activity1_present_image');
  //   before_img.classList.add("hidden");
  // }

  function activity_image1_input_btn() {
    const selectElement = document.querySelector('#post_activity_image1');
    selectElement.click();
  }

  document.getElementById('post_activity_image1').addEventListener('change', function (e) {
    // 1枚だけ表示する
    const file = e.target.files[0];
    // ファイルのブラウザ上でのURLを取得する
    const blobUrl = window.URL.createObjectURL(file);
    // img要素に表示
    const post_img = document.getElementById('activity1_image_prev');
    post_img.src = blobUrl;
    post_img.classList.toggle("hidden");
    post_img.classList.toggle("has_image1");
    const before_img = document.getElementById('activity1_present_image');
    before_img.classList.toggle("hidden");
    checkNoInput();
  });

  // 画像2枚目*****************************************
  function activity_image2_input_btn() {
    const selectElement = document.querySelector('#post_activity_image2');
    selectElement.click();
  }

  document.getElementById('post_activity_image2').addEventListener('change', function (e) {
    // 1枚だけ表示する
    const file = e.target.files[0];
    // ファイルのブラウザ上でのURLを取得する
    const blobUrl = window.URL.createObjectURL(file);
    // img要素に表示
    const post_img = document.getElementById('activity2_image_prev');
    post_img.src = blobUrl;
    post_img.classList.toggle("hidden");
    post_img.classList.toggle("has_image2");
    const before_img = document.getElementById('activity2_present_image');
    before_img.classList.toggle("hidden");
    checkNoInput();
  });
  // 画像3枚目*****************************************
  function activity_image3_input_btn() {
    const selectElement = document.querySelector('#post_activity_image3');
    selectElement.click();
  }

  document.getElementById('post_activity_image3').addEventListener('change', function (e) {
    // 1枚だけ表示する
    const file = e.target.files[0];
    // ファイルのブラウザ上でのURLを取得する
    const blobUrl = window.URL.createObjectURL(file);
    // img要素に表示
    const post_img = document.getElementById('activity3_image_prev');
    post_img.src = blobUrl;
    post_img.classList.toggle("hidden");
    post_img.classList.toggle("has_image3");
    const before_img = document.getElementById('activity3_present_image');
    before_img.classList.toggle("hidden");
    checkNoInput();
  });

  // 画像4枚目*****************************************
  function activity_image4_input_btn() {
    const selectElement = document.querySelector('#post_activity_image4');
    selectElement.click();
  }

  document.getElementById('post_activity_image4').addEventListener('change', function (e) {
    // 1枚だけ表示する
    const file = e.target.files[0];
    // ファイルのブラウザ上でのURLを取得する
    const blobUrl = window.URL.createObjectURL(file);
    // img要素に表示
    const post_img = document.getElementById('activity4_image_prev');
    post_img.src = blobUrl;
    post_img.classList.toggle("hidden");
    post_img.classList.toggle("has_image4");
    const before_img = document.getElementById('activity4_present_image');
    before_img.classList.toggle("hidden");
    checkNoInput();
  });

  function hasSeasonPrice(obj) {
    var hasSeason_Price = obj.checked;
    var seasonPriceBoxes = document.querySelectorAll(".season_price_item");
    const hasDiffAge_Price = document.getElementById('activity_has_different_ageprices_true').checked;
    if (hasSeason_Price && hasDiffAge_Price) { // シーズンも年齢別もあり => 全て required = true;
      for (var i = 0; i < seasonPriceBoxes.length; i++) {
        seasonPriceBoxes[i].classList.remove("hidden");
        if (i >= 2) {
          seasonPriceBoxes[i].children[0].required = true;
        }
      }
    } else if (hasSeason_Price && !hasDiffAge_Price) { // シーズンはあるが年齢別なし => 大人のみ required = true;
      for (var i = 0; i < seasonPriceBoxes.length; i++) {
        seasonPriceBoxes[i].classList.remove("hidden");
      }
      document.getElementById('activity_low_adult_price').required = true;
      document.getElementById('activity_high_adult_price').required = true;
      document.getElementById('activity_normal_middle_price').required = false;
      document.getElementById('activity_low_middle_price').required = false;
      document.getElementById('activity_high_middle_price').required = false;
      document.getElementById('activity_normal_kids_price').required = false;
      document.getElementById('activity_low_kids_price').required = false;
      document.getElementById('activity_high_kids_price').required = false;
    }
  }
  function noSeasonPrice(obj) {
    var hasNoSeason_Price = obj.checked;
    var seasonPriceBoxes = document.querySelectorAll(".season_price_item");
    const hasDiffAge_Price = document.getElementById('activity_has_different_ageprices_true').checked;
    if (hasNoSeason_Price && hasDiffAge_Price) { // シーズンなし、年齢別はあり => シーズンは全て required = false;
      for (var i = 0; i < seasonPriceBoxes.length; i++) {
        seasonPriceBoxes[i].classList.add("hidden");
      }
      document.getElementById('activity_low_adult_price').required = false;
      document.getElementById('activity_high_adult_price').required = false;
      document.getElementById('activity_normal_middle_price').required = true;
      document.getElementById('activity_low_middle_price').required = false;
      document.getElementById('activity_high_middle_price').required = false;
      document.getElementById('activity_normal_kids_price').required = true;
      document.getElementById('activity_low_kids_price').required = false;
      document.getElementById('activity_high_kids_price').required = false;
    } else if (hasNoSeason_Price && !hasDiffAge_Price) { // シーズンも年齢別料金もなし => 全部 false
      for (var i = 0; i < seasonPriceBoxes.length; i++) {
        seasonPriceBoxes[i].classList.add("hidden");
      }
      document.getElementById('activity_low_adult_price').required = false;
      document.getElementById('activity_high_adult_price').required = false;
      document.getElementById('activity_normal_middle_price').required = false;
      document.getElementById('activity_low_middle_price').required = false;
      document.getElementById('activity_high_middle_price').required = false;
      document.getElementById('activity_normal_kids_price').required = false;
      document.getElementById('activity_low_kids_price').required = false;
      document.getElementById('activity_high_kids_price').required = false;
    }
  }

  function hasDiffAgePrice(obj) {
    var kidsPriceBoxes = document.querySelectorAll(".other_ageprice_tr");
    const hasSeason_Price = document.getElementById('activity_has_season_price_true').checked;
    const adultLabel = document.getElementById('adult_price_label');
    adultLabel.innerHTML = '大人料金（中学生以上）';
    if (hasSeason_Price) { // せんぶ true
      for (var i = 0; i < kidsPriceBoxes.length; i++) {
        kidsPriceBoxes[i].classList.remove("hidden");
      }
      document.getElementById('activity_low_adult_price').required = true;
      document.getElementById('activity_high_adult_price').required = true;
      document.getElementById('activity_normal_middle_price').required = true;
      document.getElementById('activity_low_middle_price').required = true;
      document.getElementById('activity_high_middle_price').required = true;
      document.getElementById('activity_normal_kids_price').required = true;
      document.getElementById('activity_low_kids_price').required = true;
      document.getElementById('activity_high_kids_price').required = true;
    } else { // シーズンはなし、年齢別はあり => 通常料金のみtrue
      for (var i = 0; i < kidsPriceBoxes.length; i++) {
        kidsPriceBoxes[i].classList.remove("hidden");
      }
      document.getElementById('activity_low_adult_price').required = false;
      document.getElementById('activity_high_adult_price').required = false;
      document.getElementById('activity_normal_middle_price').required = true;
      document.getElementById('activity_low_middle_price').required = false;
      document.getElementById('activity_high_middle_price').required = false;
      document.getElementById('activity_normal_kids_price').required = true;
      document.getElementById('activity_low_kids_price').required = false;
      document.getElementById('activity_high_kids_price').required = false;
    }
  }
  function noDiffAgePrice(obj) {
    var seasonPriceBoxes = document.querySelectorAll(".other_ageprice_tr");
    const hasSeason_Price = document.getElementById('activity_has_season_price_true').checked;
    const adultLabel = document.getElementById('adult_price_label');
    adultLabel.innerHTML = '全ての年齢料金';
    if (hasSeason_Price) { // シーズンあり、年齢別はなし => 大人のみtrue
      for (var i = 0; i < seasonPriceBoxes.length; i++) {
        seasonPriceBoxes[i].classList.add("hidden");
      }
      document.getElementById('activity_low_adult_price').required = true;
      document.getElementById('activity_high_adult_price').required = true;
      document.getElementById('activity_normal_middle_price').required = false;
      document.getElementById('activity_low_middle_price').required = false;
      document.getElementById('activity_high_middle_price').required = false;
      document.getElementById('activity_normal_kids_price').required = false;
      document.getElementById('activity_low_kids_price').required = false;
      document.getElementById('activity_high_kids_price').required = false;
    } else {
      for (var i = 0; i < seasonPriceBoxes.length; i++) {
        seasonPriceBoxes[i].classList.add("hidden");
      }
      document.getElementById('activity_low_adult_price').required = false;
      document.getElementById('activity_high_adult_price').required = false;
      document.getElementById('activity_normal_middle_price').required = false;
      document.getElementById('activity_low_middle_price').required = false;
      document.getElementById('activity_high_middle_price').required = false;
      document.getElementById('activity_normal_kids_price').required = false;
      document.getElementById('activity_low_kids_price').required = false;
      document.getElementById('activity_high_kids_price').required = false;
    }
  }


  function ageFromFocus(obj) {
    // 下の要素のtagNameを取得
    var selfParent = obj.parentNode.parentNode;
    var nextParent = selfParent.nextElementSibling;
    var nextElementTag = nextParent.tagName;
    var nextElementClass = nextParent.className;

    if (nextElementTag == 'INPUT') { //すでにデータがある行
      var twoNextElement = nextParent.nextElementSibling;
      if (twoNextElement.className !== "links") { //下の要素は入力フィードである
        // 自身のagefromのminを１に
        obj.setAttribute('min', 1);
      }
    } else if (nextElementTag == 'DIV' && nextElementClass == "nested-fields") {
      obj.setAttribute('min', 1);
    }

    var prevParent = selfParent.previousElementSibling;
    if (prevParent !== null && prevParent.tagName == 'INPUT') {
      var prevAgeFrom = prevParent.previousElementSibling.children[0].children[0];
      var prevAgeFromValue = prevAgeFrom.value;
      if (prevAgeFromValue > 0) {
        newMax = prevAgeFromValue - 1;
      } else {
        newMax = 0;
      }
      obj.setAttribute('max', newMax);
    }
  }

  function changeAgeFrom(obj) {
    if (obj.value >= 1) {
      var objMinusOne = obj.value - 1;
    } else {
      var objMinusOne = 0;
    }
    var selfElement = document.getElementById(obj.id);
    var parentNestedField = selfElement.parentNode.parentNode; //nested-fieldsクラスを持つdiv
    var downParent = parentNestedField.nextElementSibling;
    if (downParent.tagName == "INPUT") { // すでにagepriceが存在 && 入力下段がinput hiddenの場合
      var towDownParent = parentNestedField.nextElementSibling.nextElementSibling;
      if (towDownParent.className !== "links") {  // 下段にさらにフィードがある場合
        var downParent = parentNestedField.nextElementSibling.nextElementSibling;
        var downAgeFrom = downParent.children[0].children[0];
        downAgeFrom.setAttribute('max', objMinusOne);
        var downAgeTo = downParent.children[2].children[0];
        downAgeTo.value = objMinusOne;
      }
    } else if (downParent.tagName == "DIV" && downParent.className == "nested-fields") {
      var downAgeFrom = downParent.children[0].children[0];
      downAgeFrom.setAttribute('max', objMinusOne);
      var downAgeTo = downParent.children[2].children[0];
      downAgeTo.setAttribute('max', objMinusOne);
      downAgeTo.value = objMinusOne;
    }
  }

  // 作れるコースは5こまで
  document.getElementById("course_add_btn").onclick = function(){
    setTimeout(function(){
      const courseItems = document.getElementById('courses').getElementsByClassName('nested-fields');
      const addBtn = document.getElementById('course_add_btn');
      if (courseItems.length >= 5) {
        addBtn.classList.add('disabled');
        addBtn.text = '体験時間は5つまで';
      } else {
        addBtn.classList.remove('disabled');
      }
      const courseTitles = document.querySelectorAll(".course_number");
      for (var i = 0; i < courseTitles.length; i++) {
        courseTitles[i].innerHTML =  'コース' + (i + 1);
      }
    }, 200);
    hasInput();
  }

  function isAllYearOpen(obj) {
    const dateBox = document.getElementById("activity_date_input_box");
    const dateBoxClass = dateBox.classList;
    if (obj.checked) {
      dateBoxClass.add("hidden");
    }
  }
  function isLimitedOpen(obj) {
    const dateBox = document.getElementById("activity_date_input_box");
    const dateBoxClass = dateBox.classList;
    if (obj.checked) {
      dateBoxClass.remove("hidden");
    }
  }

  function changeStartDate(obj) {
    let inputStartDate = new Date(obj.value); //入力された開始日
    let systemEndDate = new Date(obj.value) //
    let systemEndMin = new Date(systemEndDate.setDate(systemEndDate.getDate() + 1));
    let eYear = systemEndDate.getFullYear();
    let eMonth = ('0' + (systemEndDate.getMonth()+1)).slice(-2);
    let eDate = ('0' + systemEndDate.getDate()).slice(-2);
    let systemEndMinToString = eYear + "-" + eMonth + "-" + eDate;
    let inputEndFrom = document.getElementById("activity_end_select");
    inputEndFrom.setAttribute('min', systemEndMinToString);

    let inputEndFromValue = inputEndFrom.value;
    if (inputEndFromValue != "") {
      inputEndFromValue = new Date(inputEndFrom.value);
    }

    if (inputEndFromValue == "" || inputEndFromValue == null ) {
      inputEndFrom.setAttribute('value', systemEndMinToString);
    } else if (inputEndFromValue != "" && inputStartDate >= inputEndFromValue ){
      inputEndFrom.setAttribute('value', systemEndMinToString);
    }
  }

  function changeEndDate(obj) {
    let inputEndDate = new Date(obj.value); //入力された終了日
    let systemStartDate = new Date(obj.value) //
    let systemStartMax = new Date(systemStartDate.setDate(systemStartDate.getDate() - 1));
    let eYear = systemStartDate.getFullYear();
    let eMonth = ('0' + (systemStartDate.getMonth()+1)).slice(-2);
    let eDate = ('0' + systemStartDate.getDate()).slice(-2);
    let systemStartMaxToString = eYear + "-" + eMonth + "-" + eDate;
    let inputStartFrom = document.getElementById("activity_start_select");
    inputStartFrom.setAttribute('max', systemStartMaxToString);

    let inputStartFromValue = inputStartFrom.value;
    if (inputStartFromValue != "") {
      inputStartFromValue = new Date(inputStartFrom.value);
    }

    if (inputStartFromValue == "" || inputStartFromValue == null ) {
      inputStartFrom.setAttribute('value', systemStartMaxToString);
    } else if (inputStartFromValue != "" && inputStartFromValue >= inputEndDate ){
      inputStartFrom.setAttribute('value', systemStartMaxToString);
    }
  }

  function initMap() {
    const latfield = document.getElementById('latitude_input');
    const lngfield = document.getElementById('longitude_input');
    var myLatlng = {lat: 43.067538712974866, lng: 141.34876574909862};
    var map = new google.maps.Map(
        document.getElementById('map'), {zoom: 8, center: myLatlng});
    var infoWindow = new google.maps.InfoWindow(
        {content: 'アクティビティの実施場所にピンを落としてください', position: myLatlng});
    infoWindow.open(map);
    map.addListener('click',function(mapsMouseEvent) {
      const str = mapsMouseEvent.latLng.toString();
      const deleteBlank = str.replace(/\s+/g,'');
      const deleteBucket1 = deleteBlank.replace(/\(/g,'');
      const deleteBucketAll = deleteBucket1.replace(/\)/g,'');
      const latLngArray = deleteBucketAll.split(',');
      const newLat = latLngArray[0];
      const newLng = latLngArray[1];
      latfield.value = newLat;
      lngfield.value = newLng;

      infoWindow.close();
      infoWindow = new google.maps.InfoWindow({position: mapsMouseEvent.latLng});
      infoWindow.setContent(mapsMouseEvent.latLng.toString());
      infoWindow.open(map);
      checkNoInput();
    });

    //map2
    const meet1latfield = document.getElementById('meeting_spot1_latitude');
    const meet1lngfield = document.getElementById('meeting_spot1_longitude');
    var meet1myLatlng = {lat: 43.067538712974866, lng: 141.34876574909862};
    var meetingmap = new google.maps.Map(
        document.getElementById('meetingmap'), {zoom: 8, center: meet1myLatlng});
    var meet1infoWindow = new google.maps.InfoWindow(
        {content: 'アクティビティの集合場所にピンを落としてください', position: meet1myLatlng});
    meet1infoWindow.open(meetingmap);
    meetingmap.addListener('click',function(mapsMouseEvent) {
      const str = mapsMouseEvent.latLng.toString();
      const deleteBlank = str.replace(/\s+/g,'');
      const deleteBucket1 = deleteBlank.replace(/\(/g,'');
      const deleteBucketAll = deleteBucket1.replace(/\)/g,'');
      const latLngArray = deleteBucketAll.split(',');
      const newLat = latLngArray[0];
      const newLng = latLngArray[1];
      meet1latfield.value = newLat;
      meet1lngfield.value = newLng;

      meet1infoWindow.close();
      meet1infoWindow = new google.maps.InfoWindow({position: mapsMouseEvent.latLng});
      meet1infoWindow.setContent(mapsMouseEvent.latLng.toString());
      meet1infoWindow.open(meetingmap);
      checkNoInput();
    });
  }

  function hasChangeArea(obj) {
    const targetAreaSelectBox = document.getElementById('hidden_area_field');
    if (obj.value !== '') {
      const townSelectors = document.querySelectorAll("div.town_select");
      for (var i = 0; i < townSelectors.length; i++) {
        const townSelectItem = townSelectors[i];
        townSelectItem.children[0].required = false;
        townSelectItem.classList.add('hidden');
      }

      const selectedAreaNum = obj.value;
      const targetId = `area_${selectedAreaNum}`;
      const targetTownSelectBox = document.getElementById(`${targetId}`);
      targetTownSelectBox.children[0].required = true;
      targetTownSelectBox.classList.remove('hidden');
      targetAreaSelectBox.value = obj.value;
    } else {
      targetAreaSelectBox.value = '';
    }
    checkNoInput();
  }

  function hasSelectTown(obj) {
    const targetTownSelectBox = document.getElementById('hidden_town_field');
    targetTownSelectBox.value = obj.value;
    checkNoInput();
  }
  // 存在チェック
  function checkNoInput() {
    const noInputArr = [];
    const nameVal = document.getElementById('activity_name').value;
    if (!nameVal) {
      noInputArr.push('false');
    } else {
      noInputArr.push('true');
    }
    const profileVal = document.getElementById('activity_description').value;
    if (!profileVal) {
      noInputArr.push('false');
    } else {
      noInputArr.push('true');
    }
    const notesVal = document.getElementById('activity_notes').value;
    if (!notesVal) {
      noInputArr.push('false');
    } else {
      noInputArr.push('true');
    }
    const ageVal = document.getElementById('activity_available_age').value;
    if (!ageVal) {
      noInputArr.push('false');
    } else {
      noInputArr.push('true');
    }
    const minNumVal = document.getElementById('activity_minimum_num').value;
    if (!minNumVal) {
      noInputArr.push('false');
    } else {
      noInputArr.push('true');
    }
    const maxNumVal = document.getElementById('activity_maximum_num').value;
    if (!maxNumVal) {
      noInputArr.push('false');
    } else {
      noInputArr.push('true');
    }
    const areaVal = document.getElementById('hidden_area_field').value;
    // console.log(areaVal);
    if (!areaVal) {
      noInputArr.push('false');
    } else {
      noInputArr.push('true');
    }
    const townVal = document.getElementById('hidden_town_field').value;
    if (!townVal) {
      noInputArr.push('false');
    } else {
      noInputArr.push('true');
    }
    const latitudeVal = document.getElementById('latitude_input').value;
    if (!latitudeVal) {
      noInputArr.push('false');
    } else {
      noInputArr.push('true');
    }
    const longitudeVal = document.getElementById('longitude_input').value;
    if (!longitudeVal) {
      noInputArr.push('false');
    } else {
      noInputArr.push('true');
    }
    const meetAddressVal = document.getElementById('activity_meeting_spot1_japanese_address').value;
    if (!meetAddressVal) {
      noInputArr.push('false');
    } else {
      noInputArr.push('true');
    }
    const meetDescriptionVal = document.getElementById('activity_meeting_spot1_japanese_description').value;
    if (!meetDescriptionVal) {
      noInputArr.push('false');
    } else {
      noInputArr.push('true');
    }
    const meetLatitudeVal = document.getElementById('meeting_spot1_latitude').value;
    if (!meetLatitudeVal) {
      noInputArr.push('false');
    } else {
      noInputArr.push('true');
    }
    const meetLongitudeVal = document.getElementById('meeting_spot1_longitude').value;
    if (!meetLongitudeVal) {
      noInputArr.push('false');
    } else {
      noInputArr.push('true');
    }
    const image1 = document.querySelectorAll(".has_image1");
    if (image1.length == 0) {
      noInputArr.push('false');
    } else {
      noInputArr.push('true');
    }
    const image2 = document.querySelectorAll(".has_image2");
    if (image2.length == 0) {
      noInputArr.push('false');
    } else {
      noInputArr.push('true');
    }
    const image3 = document.querySelectorAll(".has_image3");
    if (image3.length == 0) {
      noInputArr.push('false');
    } else {
      noInputArr.push('true');
    }
    const image4 = document.querySelectorAll(".has_image4");
    if (image4.length == 0) {
      noInputArr.push('false');
    } else {
      noInputArr.push('true');
    }

    const hasSeason_Price = document.getElementById('activity_has_season_price_true').checked; // シーズン料金あるか
    const hasDiffAge_Price = document.getElementById('activity_has_different_ageprices_true').checked; // 年齢別料金あるか
    if (hasSeason_Price && hasDiffAge_Price) { //
      const priceVals = document.querySelectorAll("td.ageprice_price");
      for (var i = 0; i < priceVals.length; i++) {
        if (!priceVals[i].children[0].value) {
          noInputArr.push('false');
        } else {
          noInputArr.push('true');
        }
      }
    } else if (!hasSeason_Price && hasDiffAge_Price) {
      const priceVals = document.querySelectorAll(".normal_price_item");
      for (var i = 0; i < priceVals.length; i++) {
        if (!priceVals[i].children[0].value) {
          noInputArr.push('false');
        } else {
          noInputArr.push('true');
        }
      }
    } else if (hasSeason_Price && !hasDiffAge_Price) {
      const priceVals = document.querySelectorAll(".adult_item");
      for (var i = 0; i < priceVals.length; i++) {
        if (!priceVals[i].children[0].value) {
          noInputArr.push('false');
        } else {
          noInputArr.push('true');
        }
      }
    } else {
      const adultNormal = document.getElementById('activity_normal_adult_price');
      if (!adultNormal.value) {
        noInputArr.push('false');
      } else {
        noInputArr.push('true');
      }
    }
    const minutesVal = document.getElementById('activity_minutes').value;
    if (!minutesVal) {
      noInputArr.push('false');
    } else {
      noInputArr.push('true');
    }
    const limitedTerm = document.getElementById('activity_is_all_year_open_false').checked;
    const startDate = document.getElementById('activity_start_select');
    const endDate = document.getElementById('activity_end_select');
    if (limitedTerm) {
      if (!startDate.value || !endDate.value) {
        noInputArr.push('false');
      }
    } else {
      noInputArr.push('true');
    }

    setTimeout(function(){
      const courseItems = document.getElementById('courses').getElementsByClassName('nested-fields');
      if (courseItems.length == 0) {
        noInputArr.push('false');
      } else {
        noInputArr.push('true');
      }

      let emptyInput = 0;
      for (let i = 0;  i < noInputArr.length; i++) {
        if(noInputArr[i] == 'false'){
          emptyInput++;
        }
      }
      const err_count_bg = document.getElementById('no_input_counter_box');
      if (emptyInput == 0) {
        err_count_bg.style.backgroundColor = '#3cd848';
        const count_title = document.getElementById('no_input_counter_box_title');
        count_title.classList.add('hidden');
        const left_alert = document.getElementById('no_input_left_alert');
        left_alert.classList.add('hidden');
        const done = document.getElementById('all_input_done_no_alert');
        done.classList.remove('hidden');
        const submitBtn = document.getElementById('activity_form_submit_btn');
        submitBtn.classList.add("need_submit");
      } else {
        err_count_bg.style.backgroundColor = '#f77';
        const count_title = document.getElementById('no_input_counter_box_title');
        count_title.classList.remove('hidden');
        const left_alert = document.getElementById('no_input_left_alert');
        left_alert.classList.remove('hidden');
        const done = document.getElementById('all_input_done_no_alert');
        done.classList.add('hidden');
        const err_count = document.getElementById('no_input_count');
        err_count.innerHTML = emptyInput;
        const submitBtn = document.getElementById('activity_form_submit_btn');
        submitBtn.classList.remove("need_submit");
      }
    }, 200);
  }
</script>
<script defer
src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB8qlUsnzijhVLdxI5WPk6fy5dnrEGru8Q&callback=initMap">
</script>
